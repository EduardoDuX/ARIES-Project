@startuml

' Make the notes not look so awful

actor  Eduardo     as Eduardo
entity Mediator  as Med
actor  Bob       as Bob
autonumber

== Arrange for Mediation with the Mediator ==

Eduardo <--> Med : Establish connection (details omitted)

loop until terms are acceptable
    Eduardo -> Med : Mediation Request
    note over Eduardo, Med: Establish terms of Mediation...
    Med -> Eduardo : Mediation deny
    note over Eduardo, Med: Mediation counter terms from Mediator
end

Eduardo <- Med : Mediation grant
note over Eduardo, Med
Mediator reports routing keys and endpoint to Eduardo.

{
    "@type": ".../coordinate-mediation/1.0/grant",
    "routing_keys": ["<mediator routing key>"],
    "endpoint": "<mediator's endpoint>"
}
end note

... Some time later ...

== Create a Mediated Connection ==
group Invitation
    Eduardo -> Eduardo : Create invitation

    Eduardo -> Med : Keylist update
    note over Eduardo, Bob
    Eduardo sends invitation key to mediator with keylist update message.
    
    { 
        "@type": ".../coordinate-mediation/1.0/keylist-update"
        "updates": [
            {
                "recipient_key": "<invitation key>",
                "action": "add"
            }
        ]
    }
    end note

    Eduardo --> Bob : Transmit Invitation (Out of Band)
    note over Eduardo, Bob
    Mediator routing keys and endpoint used for invitation.

    {
       "@type": ".../connections/1.0/invite",
       "routingKeys": ["<key sent to Eduardo in mediation grant>"],
       "recipientKeys": ["<key created by Eduardo for invitation>"],
       "serviceEndpoint": "<mediator's service endpoint>"
    }
    end note
end

group Connection Request
    Bob -> Bob : Create connection request
    Bob -> Bob : Prepare message for sending
    note right of Bob
    1. Encrypt request for Eduardo
    2. Wrap message in Forward Message
    3. Pop key from "routingKeys", Encrypt message for key
    4. Repeat for each remaining key in "routingKeys"
    end note

    Bob -> Med : Forward {Connection Request}
    note right
    Bob's response will be sent 
    to the mediator the mediator
    will forward response to Eduardo
    end note
    Med -> Med : Process Forward
    note right of Med
    1. Unpack message
    2. Inspect forward "to" field
    3. Look up key in routing tables
    end note
    Eduardo <- Med : Connection Request
end

group Connection Response
    Eduardo -> Eduardo : Create Response
    Eduardo -> Med : Keylist Update
    note over Eduardo, Bob
    Eduardo sends updates to mediator, including adding
    the new connection keys and removing invitation key.
    
    { 
        "@type": ".../coordinate-mediation/1.0/keylist-update"
        "updates": [
            {
                "recipient_key": "<new connection key>",
                "action": "add"
            },
            {
                "recipient_key": "<invitation key",
                "action": "remove"
            }
        ]
    }
    end note
    Eduardo -> Bob : Connection Response
    note left
    Connection response sent to
    Bob as normal. Sent DID Doc
    includes routing keys from
    the mediator and the mediator
    endpoint for the service
    endpoint.
    end note
end

== Mediation ==

Bob -> Med : Forward {Message}
note right
Messages are encrypted 
for Eduardo and then wrapped
in a forward message for
the Mediator.
end note

Eduardo <- Med : Message
note left
Mediator decrypts the forward 
message, inspects the "to",
and forwards to Eduardo.
Eduardo decrypts final message.
end note

Eduardo -> Bob : Message
note right
Outbound messages to Bob are sent
directly, not through Mediator.
end note

@enduml
